// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/book_author.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorServiceClient is the client API for AuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorServiceClient interface {
	CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*Author, error)
	CreateAuthorStream(ctx context.Context, opts ...grpc.CallOption) (AuthorService_CreateAuthorStreamClient, error)
	CreateAuthorBidirectional(ctx context.Context, opts ...grpc.CallOption) (AuthorService_CreateAuthorBidirectionalClient, error)
	ListAuthors(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*AuthorList, error)
	FindById(ctx context.Context, in *AuthorGetRequest, opts ...grpc.CallOption) (*Author, error)
}

type authorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorServiceClient(cc grpc.ClientConnInterface) AuthorServiceClient {
	return &authorServiceClient{cc}
}

func (c *authorServiceClient) CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/pb.AuthorService/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) CreateAuthorStream(ctx context.Context, opts ...grpc.CallOption) (AuthorService_CreateAuthorStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthorService_ServiceDesc.Streams[0], "/pb.AuthorService/CreateAuthorStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &authorServiceCreateAuthorStreamClient{stream}
	return x, nil
}

type AuthorService_CreateAuthorStreamClient interface {
	Send(*CreateAuthorRequest) error
	CloseAndRecv() (*AuthorList, error)
	grpc.ClientStream
}

type authorServiceCreateAuthorStreamClient struct {
	grpc.ClientStream
}

func (x *authorServiceCreateAuthorStreamClient) Send(m *CreateAuthorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authorServiceCreateAuthorStreamClient) CloseAndRecv() (*AuthorList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AuthorList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authorServiceClient) CreateAuthorBidirectional(ctx context.Context, opts ...grpc.CallOption) (AuthorService_CreateAuthorBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthorService_ServiceDesc.Streams[1], "/pb.AuthorService/CreateAuthorBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &authorServiceCreateAuthorBidirectionalClient{stream}
	return x, nil
}

type AuthorService_CreateAuthorBidirectionalClient interface {
	Send(*CreateAuthorRequest) error
	Recv() (*Author, error)
	grpc.ClientStream
}

type authorServiceCreateAuthorBidirectionalClient struct {
	grpc.ClientStream
}

func (x *authorServiceCreateAuthorBidirectionalClient) Send(m *CreateAuthorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authorServiceCreateAuthorBidirectionalClient) Recv() (*Author, error) {
	m := new(Author)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authorServiceClient) ListAuthors(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*AuthorList, error) {
	out := new(AuthorList)
	err := c.cc.Invoke(ctx, "/pb.AuthorService/ListAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) FindById(ctx context.Context, in *AuthorGetRequest, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/pb.AuthorService/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorServiceServer is the server API for AuthorService service.
// All implementations must embed UnimplementedAuthorServiceServer
// for forward compatibility
type AuthorServiceServer interface {
	CreateAuthor(context.Context, *CreateAuthorRequest) (*Author, error)
	CreateAuthorStream(AuthorService_CreateAuthorStreamServer) error
	CreateAuthorBidirectional(AuthorService_CreateAuthorBidirectionalServer) error
	ListAuthors(context.Context, *Blank) (*AuthorList, error)
	FindById(context.Context, *AuthorGetRequest) (*Author, error)
	mustEmbedUnimplementedAuthorServiceServer()
}

// UnimplementedAuthorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorServiceServer struct {
}

func (UnimplementedAuthorServiceServer) CreateAuthor(context.Context, *CreateAuthorRequest) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) CreateAuthorStream(AuthorService_CreateAuthorStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateAuthorStream not implemented")
}
func (UnimplementedAuthorServiceServer) CreateAuthorBidirectional(AuthorService_CreateAuthorBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateAuthorBidirectional not implemented")
}
func (UnimplementedAuthorServiceServer) ListAuthors(context.Context, *Blank) (*AuthorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthors not implemented")
}
func (UnimplementedAuthorServiceServer) FindById(context.Context, *AuthorGetRequest) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedAuthorServiceServer) mustEmbedUnimplementedAuthorServiceServer() {}

// UnsafeAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorServiceServer will
// result in compilation errors.
type UnsafeAuthorServiceServer interface {
	mustEmbedUnimplementedAuthorServiceServer()
}

func RegisterAuthorServiceServer(s grpc.ServiceRegistrar, srv AuthorServiceServer) {
	s.RegisterService(&AuthorService_ServiceDesc, srv)
}

func _AuthorService_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorService/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).CreateAuthor(ctx, req.(*CreateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_CreateAuthorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthorServiceServer).CreateAuthorStream(&authorServiceCreateAuthorStreamServer{stream})
}

type AuthorService_CreateAuthorStreamServer interface {
	SendAndClose(*AuthorList) error
	Recv() (*CreateAuthorRequest, error)
	grpc.ServerStream
}

type authorServiceCreateAuthorStreamServer struct {
	grpc.ServerStream
}

func (x *authorServiceCreateAuthorStreamServer) SendAndClose(m *AuthorList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authorServiceCreateAuthorStreamServer) Recv() (*CreateAuthorRequest, error) {
	m := new(CreateAuthorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthorService_CreateAuthorBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthorServiceServer).CreateAuthorBidirectional(&authorServiceCreateAuthorBidirectionalServer{stream})
}

type AuthorService_CreateAuthorBidirectionalServer interface {
	Send(*Author) error
	Recv() (*CreateAuthorRequest, error)
	grpc.ServerStream
}

type authorServiceCreateAuthorBidirectionalServer struct {
	grpc.ServerStream
}

func (x *authorServiceCreateAuthorBidirectionalServer) Send(m *Author) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authorServiceCreateAuthorBidirectionalServer) Recv() (*CreateAuthorRequest, error) {
	m := new(CreateAuthorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthorService_ListAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).ListAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorService/ListAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).ListAuthors(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorService/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).FindById(ctx, req.(*AuthorGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorService_ServiceDesc is the grpc.ServiceDesc for AuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthorService",
	HandlerType: (*AuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthor",
			Handler:    _AuthorService_CreateAuthor_Handler,
		},
		{
			MethodName: "ListAuthors",
			Handler:    _AuthorService_ListAuthors_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _AuthorService_FindById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateAuthorStream",
			Handler:       _AuthorService_CreateAuthorStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateAuthorBidirectional",
			Handler:       _AuthorService_CreateAuthorBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/book_author.proto",
}
